<?xml version="1.0" encoding="UTF-8"?>
<sci:data xmlns:sci="http://www.SciTegic.com/" object="SciTegic.Protocol.1" format="8.0.0">
	<sci:dbitem>
		<sci:component name="QEDlatest" version="2">
			<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties, each of which will automatically hold the name of a file in the job&apos;s temporary folder, whose name is guaranteed to be unique.&lt;/p&gt;

&lt;p&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold just the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="DeclareGlobal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this protocol. Such properties can be accessed within the scope of this protocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;It is best practice to declare all global properties before use. Indeed, this practice is enforced in some contexts.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;When a global property needs to be scoped to the whole protocol:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;List the new global property in the &lt;i&gt;DeclareGlobal&lt;/i&gt; parameter at the protocol level.&lt;/dd&gt;
&lt;br/&gt;
&lt;dt&gt;&lt;b&gt;To limit a global property to a subprotocol scope:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;List the property in the subprotocol&apos;s &lt;i&gt;DeclareLocal&lt;/i&gt; parameter.&lt;/dd&gt;

&lt;p&gt;This example declares 2 global properties:&lt;/p&gt;
&lt;pre&gt;
    g_tokenHash,g_assayIdentifier
&lt;/pre&gt;

&lt;p&gt;
To initialize the declared global value with a scalar value, use the syntax:
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;property-name&lt;/i&gt; := &lt;i&gt;value&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;
You can surround text string values with quotes to aid clarity. Values of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are handled as boolean values.
&lt;/p&gt;
&lt;p&gt;This example declares 3 global properties, and sets initial values on two of them:&lt;/p&gt;
&lt;pre&gt;
    g_counter := 0, g_location, g_geography:=&quot;APAC&quot;
&lt;/pre&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Form" type="ProtocolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;The path to a protocol that will render an HTML user interface for this protocol.  This optional parameter is used by Web Port to provide a custom user interface for a protocol.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Advanced Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false" uimpl="true">
				<sci:member>__PoolID</sci:member>
				<sci:member>Http Cookie Handling</sci:member>
				<sci:member>__NotificationProtocol</sci:member>
			</sci:arg>
			<sci:arg name="__PoolID" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;__PoolID&lt;/i&gt; is a case insensitive string that can optionally be set to optimize the speed of execution for quick running protocols.  Multiple protocols with the same value for &lt;i&gt;__PoolID&lt;/i&gt; can share expensive resources such as database connections, Java VMs, memory, etc. reducing the execution time by 1 to 2 seconds per run.  This can give a large speed improvement to protocols that run in a few seconds such as web applications and interactive reports.  Longer running protocols will not see much benefit.  Generally, it is a good idea to use the same &lt;i&gt;__PoolID&lt;/i&gt; for all protocols within a single application such as an interactive report since many of the components, databases, and data structures will be similar.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;__PoolID&lt;/i&gt; can also be specified by the client when the protocol is launched.  If &lt;i&gt;__PoolID&lt;/i&gt; is specified both as a parameter by the client and as a parameter stored within the protocol, the client&apos;s value overrides the stored value.&lt;/p&gt;

&lt;p&gt;To disable pooling entirely for this particular protocol, set &lt;i&gt;__PoolID&lt;/i&gt; to &lt;b&gt;&amp;lt;Disable&amp;gt;&lt;/b&gt;&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Http Cookie Handling" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;Http Cookie Handling&lt;/i&gt; provides a mechanism to control the handling of Http cookies within components that access remote resources via Http and Https.  These include the &lt;a href=&quot;javascript:DoLink(&apos;{8A25024A-C274-485B-BB99-8570DCC4C075}&apos;)&quot;&gt;HTTP Connector&lt;/a&gt;, Data readers such as &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{93C4D73F-0B4D-03F4-B0E3-D82C4FE04C6F}&apos;)&quot;&gt;XML Reader (Generic)&lt;/a&gt;, etc., and custom Java, Perl, and .Net components that use the available APIs for accessing remote servers.  By default, New Protocols will have this setting enabled and set to &quot;Protocol Scope&quot;.  This means that Http cookies obtained from a remote server within any component in the protocol or any of its subprotocols will be parsed and appropriately sent back on subsequent requests from the same component or any other component.   The handling of the cookies is based on the IETF standard as specified in &lt;a href=&quot;javascript:DoLink(&apos;http://tools.ietf.org/html/rfc6265&apos;)&quot;&gt;http://tools.ietf.org/html/rfc6265&lt;/a&gt;.  Setting the parameter to Disabled will prevent components from parsing and returning cookies to the remote servers.&lt;/p&gt;

&lt;p&gt;Persistence of cookies is not supported, so scoping of Http cookies is entirely within the context of a single protocol execution.&lt;/p&gt;

&lt;p&gt;Older protocols that do not have the &lt;i&gt;Http Cookie Handling&lt;/i&gt; parameter will behave as though it had been set to &quot;Disabled&quot;.  To enable cookie handling in these protocols, copy this parameter from a New Protocol to the older protocol and set the parameter as desired.&lt;/p&gt;</sci:help>
				<sci:legalval selected="true">Protocol Scoped</sci:legalval>
				<sci:legalval>Disabled</sci:legalval>
			</sci:arg>
			<sci:arg name="__NotificationProtocol" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;__NotificationProtocol&lt;/i&gt; specifies the name or component ID (guid) of a protocol stored in the server&apos;s protocol database that will be executed when the current job completes. If your administrator has enabled notification protocols and depending on his or her preference, the notify protocol will either run as the anonymous user or as an admin specified user. The notification protocol receives several parameters that contain information about the original job:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Notify_JobID&lt;/i&gt;: The job id of the execution
&lt;li&gt;&lt;i&gt;Notify_JobStatus&lt;/i&gt;: 
A description of the result of the job execution
&lt;li&gt;&lt;i&gt;Notify_JobStatusCode&lt;/i&gt;: The 
status code that for the result of the job execution.
	&lt;ul style=&quot;list-style-type:circle&quot;&gt;
	
&lt;li&gt;&lt;i&gt;5&lt;/i&gt;: Job was stopped by the client or administrator.
	&lt;li&gt;&lt;i&gt;6&lt;/i&gt;: 
Job completed normally with success.
	&lt;li&gt;&lt;i&gt;7&lt;/i&gt;: Job completed with an error.
	&lt;li&gt;&lt;i&gt;8&lt;/i&gt;: 
The process ID associated with the running job crashed or otherwise disappeared.
	&lt;li&gt;&lt;i&gt;9&lt;/i&gt;: 
Job failed to start.
	&lt;/ul&gt;
&lt;li&gt;&lt;i&gt;Notify_ProtocolName&lt;/i&gt;: The name of the protocol
&lt;li&gt;&lt;i&gt;Notify_ProtocolPath&lt;/i&gt;: 
The path of the protocol in the DB.  This field can be blank for protocols that were launched without 
saving to the database.
&lt;li&gt;&lt;i&gt;Notify_ProtocolLogName&lt;/i&gt;: The log name of the protocol.  
Is usually the same as ProtocolName, however this can be set by the client to a different name than the 
protocol.
&lt;li&gt;&lt;i&gt;Notify_RunHost&lt;/i&gt;: The name of the node where the protocol executed.
&lt;li&gt;&lt;i&gt;Notify_Username&lt;/i&gt;: 
The user that ran the job
&lt;/ul&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>The Run On Grid parameter tells the server to run the protocol on the grid engine if the Pipeline Pilot server is configured to run with grid integration.</sci:help>
				<sci:member>Queue Name</sci:member>
				<sci:member>Grid Options</sci:member>
				<sci:legalval>True</sci:legalval>
				<sci:legalval selected="true">False</sci:legalval>
			</sci:arg>
			<sci:arg name="Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="true">
				<sci:help>The Queue Name allows you to specify the name of the queue on the grid engine to submit the job to. Leave blank to specify the default queue.</sci:help>
				<sci:enabledscript>parameter(&apos;Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Grid Options" type="StringType" required="false" visibility="visible" multi="true" legalvalsenforced="false" uimpl="true">
				<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
				<sci:enabledscript>parameter(&apos;Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
				<sci:help>Component Attributes</sci:help>
				<sci:legalval>ComponentTakesInput</sci:legalval>
				<sci:legalval>ComponentReturnsPass</sci:legalval>
				<sci:legalval>ComponentReturnsFail</sci:legalval>
				<sci:legalval>ComponentRunsLocal</sci:legalval>
			</sci:arg>
			<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="WebExports" type="StringType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties which will be automatically 
exported if this protocol is published as a web service.&lt;/p&gt;

&lt;p&gt;Each global property in the list is created with an empty value at the start of the protocol run.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Keep Alive" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Specifies if the process where this protocol is run should stay around for later use.&lt;/p&gt;</sci:help>
				<sci:legalval selected="true">True</sci:legalval>
				<sci:legalval>False</sci:legalval>
			</sci:arg>
			<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The user who registered this component.</sci:help>
				<sci:value>keio</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The date this component was registered.</sci:help>
				<sci:value>Tue Mar 31 17:55:39 2020</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The server version when this component was registered</sci:help>
				<sci:value>18.1.0.1604</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>QEDlatest</sci:value>
			</sci:arg>
			<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol AutoLayout</sci:help>
				<sci:value>1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
				<sci:value>PROTOCOLNODE</sci:value>
			</sci:arg>
			<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
				<sci:help>Component Revision</sci:help>
				<sci:value>790</sci:value>
			</sci:arg>
			<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>{841A4F87-B086-2441-BBD9-2C7319510DB8}</sci:value>
			</sci:arg>
			<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>By Ref</sci:help>
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
				<sci:value>100</sci:value>
				<sci:value>QEDlatest</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
			</sci:arg>
			<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Scale</sci:help>
				<sci:value>100</sci:value>
			</sci:arg>
			<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Sticky Notes</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Options</sci:help>
				<sci:legalval>Owner Access Only</sci:legalval>
			</sci:arg>
			<sci:arg name="ResultFiles Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>Include JobDir Files</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Local Component Identifier</sci:help>
				<sci:value>-1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>50 -50</sci:value>
			</sci:arg>
			<sci:arg name="OriginalPackage" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>OriginalPackage</sci:help>
				<sci:value>scitegic/coreutils</sci:value>
			</sci:arg>
			<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The original path within the database of this component.</sci:help>
				<sci:value>Protocols\Keio2018\DISCSeika2020\QEDlatest</sci:value>
			</sci:arg>
		</sci:component>
		<sci:protocol>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Drug Likeness (QED)" version="2">
					<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>The following output properties are in the range of 0 to 1, with 1 being the best: 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QED&lt;/strong&gt;: weighted estimate of drug-likeness (or desirability) score, calculated with the weight factors specified in &lt;i&gt;Descriptor Weights&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_Unweighted&lt;/strong&gt;: Unweighted estimate of drug-likeness (or desirability) score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_MW&lt;/strong&gt;: molecular weight contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ALOGP&lt;/strong&gt;: AlogP contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_HBA&lt;/strong&gt;: Hydrogen bond acceptor contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_HBD&lt;/strong&gt;: Hydrogen bond donor contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_PSA&lt;/strong&gt;: Polar surface area contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ROTB&lt;/strong&gt;: Contribution to the QED score from the number of rotatable bonds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_AROM&lt;/strong&gt;: Contribution to the QED score from the number of aromatic rings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ALERTS&lt;/strong&gt;: Contribution to the QED score from the number of undesirable substructures found in the molecule, which is calculated based on a list of 113 SMARTS queries.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; to calculate this output property, the parameter &lt;i&gt;Include ALERTS Score&lt;/i&gt; should be set to true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
These QED output properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to a parameter that requires a property name.</sci:help>
						<sci:legalval type="DoubleType" selected="true">QED</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_Unweighted</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_MW</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_ALOGP</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_HBA</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_HBD</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_PSA</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_ROTB</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_AROM</sci:legalval>
						<sci:legalval type="DoubleType" selected="true">QED_ALERTS</sci:legalval>
					</sci:arg>
					<sci:arg name="Include ALERTS Score" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Specify whether to map the undesirable substructure queries to count the number present in the molecule and include this term in the QED calculation.
&lt;p&gt;
Mapping the undesirable substructures is the most expensive part of the QED calculation, generally taking over 90% of the time. Turning this off speeds up the calculation considerably at the expense of excluding information about undesirable substructures from the resulting QED score. It could be useful to turn it off in a first pass for very large datasets.
   </sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Descriptor Weights" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Sets of weights used in the QED calculation</sci:help>
						<sci:member>Weight_MW</sci:member>
						<sci:member>Weight_AlogP</sci:member>
						<sci:member>Weight_HBA</sci:member>
						<sci:member>Weight_HBD</sci:member>
						<sci:member>Weight_PSA</sci:member>
						<sci:member>Weight_ROTB</sci:member>
						<sci:member>Weight_AROM</sci:member>
						<sci:member>Weight_ALERTS</sci:member>
					</sci:arg>
					<sci:arg name="Weight_MW" type="DoubleType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>Weight factor to apply to the Molecular Weight term</sci:help>
						<sci:value>0.80375</sci:value>
					</sci:arg>
					<sci:arg name="Weight_AlogP" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the AlogP term</sci:help>
						<sci:value>0.70325</sci:value>
					</sci:arg>
					<sci:arg name="Weight_HBA" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the number of hydrogen bond acceptors term</sci:help>
						<sci:value>0.86225</sci:value>
					</sci:arg>
					<sci:arg name="Weight_HBD" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the number of hydrogen bond donors term</sci:help>
						<sci:value>0.086</sci:value>
					</sci:arg>
					<sci:arg name="Weight_PSA" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the polar surface area term</sci:help>
						<sci:value>0.149</sci:value>
					</sci:arg>
					<sci:arg name="Weight_ROTB" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the number of rotatable bonds term</sci:help>
						<sci:value>0.77725</sci:value>
					</sci:arg>
					<sci:arg name="Weight_AROM" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the number of aromatic rings term</sci:help>
						<sci:value>0.77125</sci:value>
					</sci:arg>
					<sci:arg name="Weight_ALERTS" type="DoubleType" required="true" visibility="visible" multi="false">
						<sci:help>Weight factor to apply to the number of undesirable substructures term</sci:help>
						<sci:enabledscript>parameter(&quot;Include ALERTS score&quot;) eq true</sci:enabledscript>
						<sci:value>0.833</sci:value>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;/p&gt;A comma delimited list of global properties, each of which will automatically hold the name of a file in the job&apos;s temporary folder, whose name is guaranteed to be unique.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold just the leaf file name of the temporary file.&lt;p/&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;Any global property not declared in this way is created on the top level global property list and is accessible from all protocols, but may collide with another property of the same name.&lt;p/&gt;Scoping global properties to the subprotocol where they are used is highly recommended.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="RunToCompletion" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>When RunToCompletion is set to True, the subprotocol is re-initialized and executed in its entirety for each record it processes.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;
When set to True, this set of options allow the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running local or remote.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option judiciously, since it will not increase throughput in all circumstances. In general, it will yield improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="true">
						<sci:help>The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>25</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="true">
						<sci:help>&lt;p&gt;
Comma separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be helpful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>Comma separated list of maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>Run subprotocol on grid engine if available.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="true">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:value>ComponentReturnsPass</sci:value>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>QED ver2018</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>CALCULATORNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SubProtocol</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{4E5161D3-64B7-44FE-82EB-7091EE75DCA9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -95</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Calculates Quantitative Estimate of Drug-Likeness (QED)</sci:value>
						<sci:value>QED is calculated as described in &quot;Quantifying the chemical beauty of drugs&quot;, Bickerton GR, Paolini GV, Besnard J, Muresan S, Hopkins AL, Nat Chem. 2012 Jan 24;4(2), 90-98.
&lt;p&gt;
This component is based on a protocol developed by one of the authors, J&amp;eacuter&amp;eacutemy Besnard, which is included in the supplementary material provided with the article.
&lt;p&gt;
The following output properties are in the range of 0 to 1, with 1 being the best: 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QED&lt;/strong&gt;: weighted estimate of drug-likeness (or desirability) score, calculated with the weight factors specified in &lt;i&gt;Descriptor Weights&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_Unweighted&lt;/strong&gt;: Unweighted estimate of drug-likeness (or desirability) score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_MW&lt;/strong&gt;: molecular weight contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ALOGP&lt;/strong&gt;: AlogP contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_HBA&lt;/strong&gt;: Hydrogen bond acceptor contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_HBD&lt;/strong&gt;: Hydrogen bond donor contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_PSA&lt;/strong&gt;: Polar surface area contribution to the QED score.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ROTB&lt;/strong&gt;: Contribution to the QED score from the number of rotatable bonds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_AROM&lt;/strong&gt;: Contribution to the QED score from the number of aromatic rings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QED_ALERTS&lt;/strong&gt;: Contribution to the QED score from the number of undesirable substructures found in the molecule, which is calculated based on a list of 113 SMARTS queries.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; to calculate this output property, the parameter &lt;i&gt;Include ALERTS Score&lt;/i&gt; should be set to true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
These QED output properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to a parameter that requires a property name.</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Records with QED properties</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.2.125</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Make Shortcut by Default</sci:legalval>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Oct 18 08:28:16 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolMadeLinkIntoCopy" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Made Link Into Copy</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolModified" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Modified</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Property Calculators\Structural\Drug Likeness (QED)</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="QED|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_Unweighted|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_MW|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_ALOGP|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_HBA|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_HBD|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_PSA|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_ROTB|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_AROM|Category">Molecular Properties</sci:propval>
					<sci:propval name="QED_ALERTS|Category">Molecular Properties</sci:propval>
				</sci:proplist>
				<sci:protocol>
					<sci:data object="SciTegic.EvaluateExpression.1">
						<sci:component name="Custom Filter (PilotScript)" version="2">
							<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>The PilotScript expression used to filter the data.</sci:help>
								<sci:member>Initial Expression</sci:member>
								<sci:member>Final Expression</sci:member>
								<sci:member>Keep Calculated Properties</sci:member>
								<sci:value>@&apos;Include ALERTS score&apos;</sci:value>
							</sci:arg>
							<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>&lt;p&gt;
An expression evaluated only when the component
is first initialized (when the first data record enters).
&lt;p/&gt;
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>&lt;p&gt;
An expression evaluated only when the
component is finalized (once the last data
record has passed).
&lt;p/&gt;
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>Version of expression parser to use.</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Jan 21 09:57:16 2008</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>include ALERTS?</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>FILTERNODE</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Custom Filter (PilotScript)</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{DD58ECD1-516F-48FE-A5DB-8328AED680F2}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Passes data records for which a PilotScript expression evaluates to True

</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated. If the last statement in the expression evaluates to True or non-zero, the record is sent out the Pass port. Otherwise it is sent out the Fail port.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records for which the final expression in the PilotScript evaluates to True or non-zero</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records for which the final expression in the PilotScript evaluates to False or zero</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>21</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Filters\Custom Filter (PilotScript)</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">7.0.0.35</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="LinkTextURLType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:metaproplist>
									<sci:propval name="SCI_InitializeUsingRevertInfo" ishidden="true" base64="UI1">Al1HAAI1ATxwPgpUaGUgbmFtZSBvciBwYXRoIG5hbWUgZm9yIHRoZSBzb3VyY2UgZGF0YS4gVGhlIHNvdXJjZSBjYW4gYmUgYSBmaWxlLCBhIG5ldHdvcmsgcmVzb3VyY2UsIGEgZGF0YSByZWNvcmQgcHJvcGVydHksIG9yIGEgZ2xvYmFsIHByb3BlcnR5Lgo8L3A+IAo8cD4KPHVsPgo8bGk+VXNlIGEgZmlsZSBwYXRoIG5hbWUgZm9yIGZpbGVzPC9saT4KPGxpPlVzZSBhIG5ldHdvcmsgVVJMIGZvciBuZXR3b3JrIHJlc291cmNlczwvbGk+CjxsaT5Vc2UgImdsb2JhbDovL3Byb3BlcnR5LW5hbWUiIGZvciBnbG9iYWwgcHJvcGVydGllczwvbGk+CjwvdWw+IFVSTFR5cGUADAAAAAEBAAABHFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLgQB/AAAAAAAAAAAABxTb3VyY2UDzFPPuwQA</sci:propval>
									<sci:propval name="SCI_InitializeUsingOrigType" ishidden="true">URLType</sci:propval>
								</sci:metaproplist>
								<sci:help>&lt;p&gt;
The name or path name for the source data. The source can be a file, a network resource, a data record property, or a global property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Use a file path name for files&lt;/li&gt;
&lt;li&gt;Use a network URL for network resources&lt;/li&gt;
&lt;li&gt;Use &quot;global://property-name&quot; for global properties&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:value>SMARTS
*1[O,S,N]*1
[S,C](=[O,S])[F,Br,Cl,I]
[CX4][Cl,Br,I]
[C,c]S(=O)(=O)O[C,c]
[$([CH]),$(CC)]#CC(=O)[C,c]
[$([CH]),$(CC)]#CC(=O)O[C,c]
n[OH]
[$([CH]),$(CC)]#CS(=O)(=O)[C,c]
C=C(C=O)C=O
n1c([F,Cl,Br,I])cccc1
[CH1](=O)
[O,o][O,o]
[C;!R]=[N;!R]
[N!R]=[N!R]
[#6](=O)[#6](=O)
[S,s][S,s]
[N,n][NH2]
C(=O)N[NH2]
[C,c]=S
[$([CH2]),$([CH][CX4]),$(C([CX4])[CX4])]=[$([CH2]),$([CH][CX4]),$(C([CX4])[CX4])]
C1(=[O,N])C=CC(=[O,N])C=C1
C1(=[O,N])C(=[O,N])C=CC=C1
a21aa3a(aa1aaaa2)aaaa3
a31a(a2a(aa1)aaaa2)aaaa3
a1aa2a3a(a1)A=AA=A3=AA=A2
c1cc([NH2])ccc1
[Hg,Fe,As,Sb,Zn,Se,se,Te,B,Si,Na,Ca,Ge,Ag,Mg,K,Ba,Sr,Be,Ti,Mo,Mn,Ru,Pd,Ni,Cu,Au,Cd,Al,Ga,Sn,Rh,Tl,Bi,Nb,Li,Pb,Hf,Ho]
I
OS(=O)(=O)[O-]
[N+](=O)[O-]
C(=O)N[OH]
C1NC(=O)NC(=O)1
[SH]
[S-]
c1ccc([Cl,Br,I,F])c([Cl,Br,I,F])c1[Cl,Br,I,F]
c1cc([Cl,Br,I,F])cc([Cl,Br,I,F])c1[Cl,Br,I,F]
[CR1]1[CR1][CR1][CR1][CR1][CR1][CR1]1
[CR1]1[CR1][CR1]cc[CR1][CR1]1
[CR2]1[CR2][CR2][CR2][CR2][CR2][CR2][CR2]1
[CR2]1[CR2][CR2]cc[CR2][CR2][CR2]1
[CH2R2]1N[CH2R2][CH2R2][CH2R2][CH2R2][CH2R2]1
[CH2R2]1N[CH2R2][CH2R2][CH2R2][CH2R2][CH2R2][CH2R2]1
C#C
[OR2,NR2]@[CR2]@[CR2]@[OR2,NR2]@[CR2]@[CR2]@[OR2,NR2]
[$([N+R]),$([n+R]),$([N+]=C)][O-]
[C,c]=N[OH]
[C,c]=NOC=O
[C,c](=O)[CX4,CR0X3,O][C,c](=O)
c1ccc2c(c1)ccc(=O)o2
[O+,o+,S+,s+]
N=C=O
[NX3,NX4][F,Cl,Br,I]
c1ccccc1OC(=O)[#6]
[CR0]=[CR0][CR0]=[CR0]
[C+,c+,C-,c-]
N=[N+]=[N-]
C12C(NC(N1)=O)CSC2
c1c([OH])c([OH,NH2,NH])ccc1
P
[N,O,S]C#N
C=C=O
[Si][F,Cl,Br,I]
[SX2]O
[SiR0,CR0](c1ccccc1)(c2ccccc2)(c3ccccc3)
O1CCCCC1OC2CCC3CCCCC3C2
N=[CR0][N,n,O,S]
[cR2]1[cR2][cR2]([Nv3X3,Nv4X4])[cR2][cR2][cR2]1[cR2]2[cR2][cR2][cR2]([Nv3X3,Nv4X4])[cR2][cR2]2
C=[C!r]C#N
[cR2]1[cR2]c([N+0X3R0,nX3R0])c([N+0X3R0,nX3R0])[cR2][cR2]1
[cR2]1[cR2]c([N+0X3R0,nX3R0])[cR2]c([N+0X3R0,nX3R0])[cR2]1
[cR2]1[cR2]c([N+0X3R0,nX3R0])[cR2][cR2]c1([N+0X3R0,nX3R0])
[OH]c1ccc([OH,NH2,NH])cc1
c1ccccc1OC(=O)O
[SX2H0][N]
c12ccccc1(SC(S)=N2)
c12ccccc1(SC(=S)N2)
c1nnnn1C=O
s1c(S)nnc1NC=O
S1C=CSC1=S
C(=O)Onnn
OS(=O)(=O)C(F)(F)F
N#CC[OH]
N#CC(=O)
S(=O)(=O)C#N
N[CH2]C#N
C1(=O)NCC1
S(=O)(=O)[O-,OH]
NC[F,Cl,Br,I]
C=[C!r]O
[NX2+0]=[O+0]
[OR0,NR0][OR0,NR0]
(C(=O)O[C,H1]).(C(=O)O[C,H1]).(C(=O)O[C,H1])
[CX2R0][NX3R0]
c1ccccc1[C;!R]=[C;!R]c2ccccc2
[NX3R0,NX4R0,OR0,SX2R0][CX4][NX3R0,NX4R0,OR0,SX2R0]
[s,S,c,C,n,N,o,O]~[n+,N+](~[s,S,c,C,n,N,o,O])(~[s,S,c,C,n,N,o,O])~[s,S,c,C,n,N,o,O]
[s,S,c,C,n,N,o,O]~[nX3+,NX3+](~[s,S,c,C,n,N])~[s,S,c,C,n,N]
[*]=[N+]=[*]
[SX3](=O)[O-,OH]
N#N
F.F.F.F
[R0;D2][R0;D2][R0;D2][R0;D2]
[cR,CR]~C(=O)NC(=O)~[cR,CR]
C=!@CC=[O,S]
[#6,#8,#16][C,c](=O)O[C,c]
c[C;R0](=[O,S])[C,c]
c[SX2][C;!R]
C=C=C
c1nc([F,Cl,Br,I,S])ncc1
c1ncnc([F,Cl,Br,I,S])c1
c1nc(c2c(n1)nc(n2)[F,Cl,Br,I])
[C,c]S(=O)(=O)c1ccc(cc1)F
[15N,13C,18O,2H,34S]</sci:value>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read (all if value is empty)</sci:help>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The type of tag to create to identify the source of data records. A property called &quot;SourceTag&quot; is created and holds the value indicated.

 - None: No SourceTag property is created and any existing ones are removed.

 - Filename: The name of the file read.

 - FilenameAndExtension: The name of the file read with its file extension.

 - FullFilename: The name of the file read, including the directory path.

 - ZipFilename: When reading a compressed zip file, the filename within the compressed archive.

 - Number: When multiple files are read in this component, they are numbered 1,2,3...

 - Letter: When multiple files are read in this component, they are lettered A, B, C...

 - KeepCurrent: Keeps the current value of SourceTag.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false">
								<sci:help>A list of properties the reader retains for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>&lt;p&gt;UTF-8 is a type of character encoding used to represent international characters with multiple bytes whereas basic Latin characters remain as a single byte.  Files can be stored with a Byte Order Mark (BOM) to indicate that the type of character encoding.&lt;/p&gt;
&lt;p&gt;When reading files that do not have a BOM, this parameter allows the reader to attempt to automatically detect UTF-8 encodings and convert as needed.  However, be aware that automatic detection is not always reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, you can consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the file, then converting using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;&lt;/p&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>When True, property names are taken from the first line of data in the file. When False, properties are named Column1,Column2, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval>FigureOut</sci:legalval>
								<sci:legalval selected="true">Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:value>ComponentReturnsPass</sci:value>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval>ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Nov 01 12:19:54 2012</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Delimited Text
Reader</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader (Cross platform)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.0.0.100</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>24</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Molecule from SMARTS" version="2">
							<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:help>The name of the property in the data
which holds the SMARTS information</sci:help>
								<sci:value>SMARTS</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="FromPropertyIs" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>The type of string</sci:help>
								<sci:value>SMARTS</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 19 103:23 2008</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecule from SMARTS</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecule from SMARTS</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{FFFF62DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Converts a Daylight SMARTS text property to a molecule

</sci:value>
								<sci:value>Builds a molecular representation for each data record from the SMARTS data found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMARTS string is preserved. 
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;SMARTS strings contain query features.  Molecules built from SMARTS are typically used downstream as queries by substructure search components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create a molecule from a SMILES string, see &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For information about SMARTS, see
&lt;a href=&quot;javascript:DoLink(&apos;http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html&apos;)&quot;&gt;Daylight SMARTS Theory&lt;/a&gt;.
&lt;/ul&gt;



</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecular data record created from SMARTS string</sci:value>
								<sci:value>Generic Data</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>7.0.0.46</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>16</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMARTS</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.EvaluateExpression.1">
						<sci:component name="Tag Data" version="2">
							<sci:arg name="TagName" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Name of a new property to create to serve as a tag</sci:help>
								<sci:value>isQuery</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>This expression is executed only the first time data passes into the component. (Since there is no data available at initialization time, only expressions referencing global properties are allowed.)</sci:help>
							</sci:arg>
							<sci:arg name="Expression" type="ExpressionType" required="true" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate</sci:help>
								<sci:value>Property(&apos;$(TagName)&apos;) := true;</sci:value>
							</sci:arg>
							<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>This expression is executed only at finalization (after the last data passes out of the component). 
 (Since there is no data available at finalization time, only expressions referencing global properties are allowed.)
</sci:help>
							</sci:arg>
							<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="nevershow" multi="false">
								<sci:help>Adds any properties calculated in this component to a molecule&apos;s property list</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Fri Sep 15 09:21:22 2006</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Tag Data</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Evaluate Expression</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{BCF71EB2-1ED7-4B27-B263-BA531EABFC9C}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Tags data records with a specified property name for later identification</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, a new property is created and assigned a value of True.  The name of the property is specified by &lt;i&gt;TagName&lt;/i&gt;.  Data records tagged in this way can be identified in downstream components by checking whether the property is defined. This is useful for marking a data stream prior to combining it with other streams for learning or other operations.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;An alternative method for tagging records is available in most reader component by using &lt;i&gt;SourceTag&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To remove a tag, use &lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To separate tagged data records into a separate data stream, use &lt;a href=&quot;javascript:DoLink(&apos;{F69870E0-BAF7-43E4-8B09-F53C47DB94F3}&apos;)&quot;&gt;Remove Tagged Filter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To group data together by tag for use in run-to-completion subprotocols, use &lt;a href=&quot;javascript:DoLink(&apos;{3FDE8197-D86F-4EB0-99FF-82D6430AF466}&apos;)&quot;&gt;Group Data by Tag&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the additional tag property</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>6.0.0.46</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>13</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Add Tag Property</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSGMap.1">
						<sci:component name="Substructure Map" version="2">
							<sci:arg name="Query Source" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>The source of queries:
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;From Tag:&lt;/b&gt; Queries are molecules in the input stream that have been tagged with the property name specified by the &lt;i&gt;Query Tag&lt;/i&gt;  parameter. Queries must occur in the input stream before targets.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;From File:&lt;/b&gt; Queries are read from the list of files specified by the &lt;i&gt;Source&lt;/i&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Query Tag</sci:member>
								<sci:member>Source</sci:member>
								<sci:legalval>From File</sci:legalval>
								<sci:legalval selected="true">From Tag</sci:legalval>
							</sci:arg>
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The file specifying the substructure(s) to search for.</sci:help>
								<sci:member>Source Component</sci:member>
								<sci:enabledscript>parameter(&quot;Query Source&quot;) eq &quot;From File&quot;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Source Component" type="ComponentType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>Name of the component to read the source file.</sci:help>
								<sci:value>File Reader</sci:value>
							</sci:arg>
							<sci:arg name="Query Tag" type="StringType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>The Query Tag is the property name used to
detect an incoming query. All queries on the input stream must carry this tag.</sci:help>
								<sci:enabledscript>parameter(&quot;Query Source&quot;) eq &quot;From Tag&quot;</sci:enabledscript>
								<sci:value>IsQuery</sci:value>
							</sci:arg>
							<sci:arg name="Map Type" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to output &quot;All Mappings&quot; (for example, Benzene would map onto 
itself 12 ways), or &quot;Unique Mappings&quot; (no two mappings contain an identical set of atoms, so Benzene would return 1 mapping).
</sci:help>
								<sci:legalval selected="true">Unique Mappings</sci:legalval>
								<sci:legalval>All Mappings</sci:legalval>
							</sci:arg>
							<sci:arg name="Map Output" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>Specifies the properties to output:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;NumQueries:&lt;/b&gt; The number of queries&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumQueriesMapped:&lt;/b&gt; The number of queries that successfully mapped&lt;/li&gt;
&lt;li&gt;&lt;b&gt;QueriesMapped:&lt;/b&gt; The name of the queries that successfully mapped&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumTimesQueriesMapped:&lt;/b&gt; The number of times each successfully mapped query mapped the target&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AtomToAtomMaps:&lt;/b&gt; If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;True&apos;, atom-to-atom mappings are added in properties that begin with the query name and end with &quot;_Maps&quot; or &quot;_AllMapped&quot;.
&lt;br&gt;
&quot;_Maps&quot; contains an array of the individual mappings. Each mapping contains the indices of the target atoms that map onto the corresponding query atoms.
&lt;br&gt;
&quot;_AllMapped&quot; contains the indices of all target atoms that are mapped by the query, in ascending order.
&lt;br&gt;
If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;False&apos;, the individual mappings for all queries are placed in &lt;b&gt;Query_Maps&lt;/b&gt;, and the list of all mapped target atoms in &lt;b&gt;Query_AllMapped&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BondToBondMaps:&lt;/b&gt; If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;True&apos;, bond-to-bond mappings are added in properties that begin with the query name and end with &quot;_BondMaps&quot; or &quot;_AllBondsMapped&quot;.
&lt;br&gt;
&quot;_BondMaps&quot; contains an array of the individual mappings. Each mapping contains the indices of the target bonds that map onto the corresponding query bonds.
&lt;br&gt;
&quot;_AllBondsMapped&quot; contains the indices of all target bonds that are mapped by the query, in ascending order.
&lt;br&gt;
If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;False&apos;, the individual mappings for all queries are placed in &lt;b&gt;Query_BondMaps&lt;/b&gt;, and the list of all mapped target bonds in &lt;b&gt;Query_AllBondsMapped&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RMSD:&lt;/b&gt; Root mean squared deviation between the coordinates of the mapped atoms in the query and in the target. No alignment is performed between query and target. The rmsd is calculated using the original coordinates. This option is commonly used to calculate rmsd between prealigned molecules.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval>NumQueries</sci:legalval>
								<sci:legalval selected="true">NumQueriesMapped</sci:legalval>
								<sci:legalval>QueriesMapped</sci:legalval>
								<sci:legalval>NumTimesQueriesMapped</sci:legalval>
								<sci:legalval>AtomToAtomMaps</sci:legalval>
								<sci:legalval>BondToBondMaps</sci:legalval>
								<sci:legalval>RMSD</sci:legalval>
							</sci:arg>
							<sci:arg name="Search Options" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>Options for substructure searching. For maximum compatibility with the Direct cartridge, select the first seven options.

The following options are available for use with all queries:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Uncharged Atoms Can Map Charged Atoms&lt;/b&gt;: Allow uncharged query atoms to map onto charged target atoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NonChiral Queries are Enantiomers&lt;/b&gt;: Queries containing stereoatoms are considered as a mixture of enantiomers 
rather than absolute.&lt;p&gt;For molecules with relative stereo groups (BIOVIA Enhanced Stereo), this flag 
controls whether or not to check all the possible stereo configurations represented by the relative stereo 
groups when checking stereo. When the flag is OFF, only the actual stereo configurations present in the 
molecules (as drawn) are compared. When the flag is ON, all the possible combinations of stereo configurations 
for the query and the target are compared to look for a match.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Chiral Queries Only Map Chiral Targets&lt;/b&gt;: A query marked Chiral can map only onto targets marked Chiral.&lt;p&gt;For molecules with relative stereo groups (BIOVIA Enhanced Stereo), this flag controls whether or not check 
the types of stereo groups when checking stereo. When the flag is OFF, all stereo groups (ABS, OR, AND) 
are allowed to map each other. When the flag is ON, the matching rules for the relative stereo groups 
are:
&lt;ul&gt;&lt;li&gt;ABS group in query can only map ABS group in target&lt;/li&gt;
&lt;li&gt;OR groups in query can map OR and ABS groups in target&lt;/li&gt;
&lt;li&gt;AND groups in query can map AND, OR, and ABS groups in target.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ignore Stereo in 3D Queries&lt;/b&gt;: When set, the stereochemistry implicit in three-dimensional coordinates is not used during mapping, only stereochemistry defined using up or down wedge bonds is used.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Check Bonds To RAtoms&lt;/b&gt;:  Toggles the check of query features (e.g. order, Chain/Ring) on bonds to RAtoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Match Sgroups&lt;/b&gt;: When checked, component, mixture, formulation and data Sgroups are considered during mapping.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Marked Isotopes Only Map Marked Isotopes&lt;/b&gt;: When set, query atoms with isotopes marked will only map target atoms that have their isotopes marked.  This is true even if the isotope marked matches natural abundance.  That is, &quot;16O&quot; maps &quot;16O&quot; but not O.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Unmarked Isotopes Only Map Unmarked Isotopes&lt;/b&gt;: When set, query atoms with isotopes unmarked will only map target atoms that also have their isotopes unmarked.  That is, &quot;O&quot; maps &quot;O&quot;, but will not map either &quot;16O&quot; or &quot;18O&quot;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ignore Isotopes&lt;/b&gt;: Toggles whether to check isotope query features.  Enabling this overrides other isotope options.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Localized Aromatic Bonds&lt;/b&gt;:  &quot;Localized&quot; aromatic bonds are bonds for which all kekule 
representations have the bond always the same type (single or double).  For example, the single and double 
bonds in pyrrole are localized, while the bonds in pyridine are not. Setting this option allows single or double bond 
queries to map onto localized aromatic bonds.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Stereo Atoms Can Map Nonstereo Atoms&lt;/b&gt;: Marked stereoatoms must map onto stereo-appropriate atoms in the targets, instead of being allowed to also map onto unknown or unmarked atoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Match Cis Trans Double Bonds&lt;/b&gt;: Toggles the checking of double-bond stereo.  When this option is not 
checked, only the stereo for double bonds flagged with the stereo-care query feature will be checked.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ignore Reaction Mappings&lt;/b&gt;: Toggles whether to ignore a reaction&apos;s atom-atom mappings and bond-status 
flags when matching against a reaction query.  When checked, only a substructure match is performed.&lt;/li&gt;
&lt;/ul&gt;

The following options are only available for non-markush targets and for queries which do not contain polymer or markush features:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;HFill if RAtoms Found&lt;/b&gt;: If RAtoms are found in the query, hydrogen-fill all other atoms; allow substituents 
only in the locations marked by the RAtoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Interpret RAtoms Literally&lt;/b&gt;: Treat R atoms as literal atoms, rather than as query types. Useful for searching and manipulating literal RAtoms in target molecules.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Interpret ZAtoms Literally&lt;/b&gt;: Treat R atoms as literal atoms, rather than as attachment markers. Template (Z) atoms in queries are treated as A atoms attached by a bond which can be of any type (single, double, triple, or aromatic)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Interpret StarAtoms Literally&lt;/b&gt;: Treat Star (*) atoms as literal atoms, rather than as query features.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StarAtoms Can Map Hydrogens&lt;/b&gt;: Toggles whether Star (*) atoms can map hydrogen atoms.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Uncharged Atoms Can Map Charged Atoms</sci:legalval>
								<sci:legalval selected="true">NonChiral Queries are Enantiomers</sci:legalval>
								<sci:legalval selected="true">Chiral Queries Only Map Chiral Targets</sci:legalval>
								<sci:legalval selected="true">Ignore Stereo in 3D Queries</sci:legalval>
								<sci:legalval selected="true">Check Bonds To RAtoms</sci:legalval>
								<sci:legalval selected="true">Match Sgroups</sci:legalval>
								<sci:legalval selected="true">Marked Isotopes Only Map Marked Isotopes</sci:legalval>
								<sci:legalval>Unmarked Isotopes Only Map Unmarked Isotopes</sci:legalval>
								<sci:legalval>Ignore Isotopes</sci:legalval>
								<sci:legalval>Use Localized Aromatic Bonds</sci:legalval>
								<sci:legalval>Stereo Atoms Can Map Nonstereo Atoms</sci:legalval>
								<sci:legalval>Match Cis Trans Double Bonds</sci:legalval>
								<sci:legalval>Ignore Reaction Mappings</sci:legalval>
								<sci:legalval>HFill if RAtoms Found</sci:legalval>
								<sci:legalval>Interpret RAtoms Literally</sci:legalval>
								<sci:legalval>Interpret ZAtoms Literally</sci:legalval>
								<sci:legalval>Interpret StarAtoms Literally</sci:legalval>
								<sci:legalval>StarAtoms Can Map Hydrogens</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>Return After First Map</sci:member>
								<sci:member>Separate Query Outputs</sci:member>
								<sci:member>Maximum Number of Maps</sci:member>
								<sci:member>Run Using Batch Size</sci:member>
								<sci:member>Reaction Matching Behavior</sci:member>
							</sci:arg>
							<sci:arg name="Return After First Map" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Return all mappings or just the first one discovered</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Separate Query Outputs" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Separate query outputs into separate properties or use the 
Query_Maps, Query_AllMapped, Query_Names properties for all queries</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Maximum Number of Maps" type="LongType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Specifies the maximum number of atom-atom mappings to return for each query. Leave blank to return all the mappings.
&lt;p&gt;
If the maximum number of maps is reached for any of the queries, the property &lt;b&gt;MaxNumMapsReached&lt;/b&gt; is defined for the input molecule.</sci:help>
							</sci:arg>
							<sci:arg name="Run Using Batch Size" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>If a positive number is given, the queries are applied to the target molecules in batches of this size. Useful if you have tens of thousands of queries and want to avoid filling up all your memory. Depending on the size of your queries, batch sizes of 1,000 to 5,000 are reasonable.

 If left blank or set to 0, batching is not done; all queries are read into memory and the incoming molecules processed in a single pass.
</sci:help>
							</sci:arg>
							<sci:arg name="Reaction Matching Behavior" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Determines how reaction targets are matched against molecule queries.  Note these options do not apply for reaction queries.
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Reactants Or Products:&lt;/b&gt; Queries can match any part of the target reaction.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reactants:&lt;/b&gt; Only the reactants are checked for a substructure match.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Products:&lt;/b&gt; Only the products are checked for a substructure match.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reactants Not Products:&lt;/b&gt; Queries must match on the reactant side of the the target reaction, but not the product side.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Products Not Reactants:&lt;/b&gt; Queries must match on the product side of the the target reaction, but not the reactant side.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reactants And Products:&lt;/b&gt; Queries must match the target reaction on both the reactant and product sides.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Reactants Or Products</sci:legalval>
								<sci:legalval>Reactants</sci:legalval>
								<sci:legalval>Products</sci:legalval>
								<sci:legalval>Reactants Not Products</sci:legalval>
								<sci:legalval>Products Not Reactants</sci:legalval>
								<sci:legalval>Reactants And Products</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Support Reactions" type="BoolType" required="false" visibility="nevershow" multi="false" expanded="true">
								<sci:help>Toggles whether or not to support reactions as queries and targets.  Support for reactions increases the memory footprint of the component by a factor of between 2 and 3.  For most cases, the footprint will still be quite small, but if you are loading a large number of queries (more than a few thousand), then you&apos;ll see a substantial decrease in process size.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Mapping Engine" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Toggles whether to force one of the underlying mapping engines or to choose the engine based based upon features in the input query.</sci:help>
								<sci:legalval>SGMap</sci:legalval>
								<sci:legalval>FSMap</sci:legalval>
								<sci:legalval selected="true">Auto</sci:legalval>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Substructure Map</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Sep 05 108:28 2012</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Substructure Map</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{1F593CE1-EAF3-4280-AA72-8582904D25DA}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Searches each molecule for the presence of one or more substructures</sci:value>
								<sci:value>The source of the queries are specified by &lt;i&gt;QuerySource&lt;/i&gt;.  Queries are either molecules in the input stream that have been tagged, as specified by &lt;i&gt;QueryTag&lt;/i&gt; or a list of files specified by &lt;i&gt;Source&lt;/i&gt;. The substructure searches are conducted on all other molecules on the input stream, which are passed unmodified through the Pass port.
Each query is mapped against all of the target molecules with the exception that markush queries are not matched against markush targets, only non-markush queries can be matched in this case.
&lt;p&gt;Several properties with mapping information can be added to each target molecule successfully mapped (only NumQueries and NumQueriesMapped can be added to target molecules that did not map any query, and atom and bond mappings and RMS deviation are not computed for markush targets):
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;NumQueries:&lt;/b&gt; The number of queries&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumQueriesMapped:&lt;/b&gt; The number of queries that successfully mapped&lt;/li&gt;
&lt;li&gt;&lt;b&gt;QueriesMapped:&lt;/b&gt; The name of the queries that successfully mapped&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumTimesQueriesMapped:&lt;/b&gt; The number of times each successfully mapped query mapped the target&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AtomToAtomMaps:&lt;/b&gt; If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;True&apos;, atom-to-atom mappings are added in properties that begin with the query name and end with &quot;_Maps&quot; or &quot;_AllMapped&quot;.
&lt;br&gt;
&quot;_Maps&quot; contains an array of the individual mappings. Each mapping contains the indices of the target atoms that map onto the corresponding query atoms.
&lt;br&gt;
&quot;_AllMapped&quot; contains the indices of all target atoms that are mapped by the query, in ascending order.
&lt;br&gt;
If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;False&apos;, the individual mappings for all queries are placed in &lt;b&gt;Query_Maps&lt;/b&gt;, and the list of all mapped target atoms in &lt;b&gt;Query_AllMapped&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BondToBondMaps:&lt;/b&gt; If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;True&apos;, bond-to-bond mappings are added in properties that begin with the query name and end with &quot;_BondMaps&quot; or &quot;_AllBondsMapped&quot;.
&lt;br&gt;
&quot;_BondMaps&quot; contains an array of the individual mappings. Each mapping contains the indices of the target bonds that map onto the corresponding query bonds.
&lt;br&gt;
&quot;_AllBondsMapped&quot; contains the indices of all target bonds that are mapped by the query, in ascending order.
&lt;br&gt;
If &lt;i&gt;SeparateQueryOutputs&lt;/i&gt; is &apos;False&apos;, the individual mappings for all queries are placed in &lt;b&gt;Query_BondMaps&lt;/b&gt;, and the list of all mapped target bonds in &lt;b&gt;Query_AllBondsMapped&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RMSD:&lt;/b&gt; Root mean squared deviation between the coordinates of the mapped atoms in the query and in the target. No alignment is performed between query and target. The rmsd is calculated using the original coordinates. This option is commonly used to calculate rmsd between prealigned molecules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;See also: &lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;For other structure mapping components that perform more specific tasks, see &lt;a href=&quot;javascript:DoLink(&apos;{D52672D9-3FE8-4744-AC49-C80E8CFCABE9}&apos;)&quot;&gt;Align Molecules using Substructure&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{95060EBC-BD8B-4940-9132-B8538B9FCF55}&apos;)&quot;&gt;Substructure Filter&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{9AE3F912-3B59-4658-946C-CEFEC278FB89}&apos;)&quot;&gt;Substructure Count&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{48307064-6A57-4E91-AFA1-C3BD09E9E351}&apos;)&quot;&gt;Exact Structure Map&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;
  </sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value>Query (tagged) and non-query molecules</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecules with mapping properties</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.0.0.10</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>11</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Search and Similarity\Structure Mapping\Substructure Map</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.EvaluateExpression.1">
						<sci:component name="Custom Manipulator (PilotScript)" version="2">
							<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
								<sci:member>Initial Expression</sci:member>
								<sci:member>Final Expression</sci:member>
								<sci:member>Keep Calculated Properties</sci:member>
								<sci:value>/* Calculate QED */
#alerts := @&apos;Include ALERTS score&apos;;

#removeProp := (Molecular_Weight is not defined);
#p := Molecular_Weight;
if #removeProp then
	remove(&apos;Molecular_Weight&apos;);
end if;
#QED_MW := (#a_MW + (#b_MW/(1 + EXP(-1*( #p - #c_MW + #d_MW/2)/#e_MW)))*
	      (1 - 1/(1 + EXP(-1*(#p - #c_MW - #d_MW + #d_MW/2)/#f_MW))))/#dx_max_MW;

#removeProp := (AlogP is not defined);
#p := AlogP;
if #removeProp then
	remove(&apos;AlogP&apos;);
end if;
#QED_ALOGP := (#a_AlogP + (#b_AlogP/(1 + EXP(-1*( #p - #c_AlogP + #d_AlogP/2)/#e_AlogP)))*
	         (1 - 1/(1 + EXP(-1*(#p - #c_AlogP - #d_AlogP + #d_AlogP/2)/#f_AlogP))))/#dx_max_AlogP;

#removeProp := (Num_H_Acceptors is not defined);
#p := Num_H_Acceptors;
if #removeProp then
	remove(&apos;Num_H_Acceptors&apos;);
end if;
#QED_HBA := (#a_HBA + (#b_HBA/(1 + EXP(-1*( #p - #c_HBA + #d_HBA/2)/#e_HBA)))*
	       (1 - 1/(1 + EXP(-1*(#p - #c_HBA - #d_HBA + #d_HBA/2)/#f_HBA))))/#dx_max_HBA;

#removeProp := (Num_H_Donors is not defined);
#p := Num_H_Donors;
if #removeProp then
	remove(&apos;Num_H_Donors&apos;);
end if;
#QED_HBD := (#a_HBD + (#b_HBD/(1 + EXP(-1*( #p - #c_HBD + #d_HBD/2)/#e_HBD)))*
	       (1 - 1/(1 + EXP(-1*(#p - #c_HBD - #d_HBD + #d_HBD/2)/#f_HBD))))/#dx_max_HBD;

#removeProp := (Molecular_PolarSurfaceArea is not defined);
#p := Molecular_PolarSurfaceArea;
if #removeProp then
	remove(&apos;Molecular_PolarSurfaceArea&apos;);
end if;
#QED_PSA := (#a_PSA + (#b_PSA/(1 + EXP(-1*( #p - #c_PSA + #d_PSA/2)/#e_PSA)))*
	       (1 - 1/(1 + EXP(-1*(#p - #c_PSA - #d_PSA + #d_PSA/2)/#f_PSA))))/#dx_max_PSA;

#removeProp := (Num_RotatableBonds is not defined);
#p := Num_RotatableBonds;
if #removeProp then
	remove(&apos;Num_RotatableBonds&apos;);
end if;
#QED_ROTB := (#a_ROTB + (#b_ROTB/(1 + EXP(-1*( #p - #c_ROTB + #d_ROTB/2)/#e_ROTB)))*
	        (1 - 1/(1 + EXP(-1*(#p - #c_ROTB - #d_ROTB + #d_ROTB/2)/#f_ROTB))))/#dx_max_ROTB;

#removeProp := (Num_AromaticRings is not defined);
#p := Num_AromaticRings;
if #removeProp then
	remove(&apos;Num_AromaticRings&apos;);
end if;
#QED_AROM := (#a_AROM + (#b_AROM/(1 + EXP(-1*( #p - #c_AROM + #d_AROM/2)/#e_AROM)))*
	        (1 - 1/(1 + EXP(-1*(#p - #c_AROM - #d_AROM + #d_AROM/2)/#f_AROM))))/#dx_max_AROM;

if #alerts then
	#p := NumQueriesMapped;
	remove(&apos;NumQueriesMapped&apos;);
	#QED_ALERTS := (#a_ALERTS + (#b_ALERTS/(1 + EXP(-1*( #p - #c_ALERTS + #d_ALERTS/2)/#e_ALERTS)))*
                   (1 - 1/(1 + EXP(-1*(#p - #c_ALERTS - #d_ALERTS + #d_ALERTS/2)/#f_ALERTS))))/#dx_max_ALERTS;
end if;
	
/* QED unweighted numerator */	
#sum_unweighted := log(#QED_MW)  + log(#QED_ALOGP) + log(#QED_HBA)  + log(#QED_HBD) +
                   log(#QED_PSA) + log(#QED_ROTB)  + log(#QED_AROM);
if #alerts then
	#sum_unweighted += log(#QED_ALERTS);
	#sum_weights_unweighted := 8;
else
	#sum_weights_unweighted := 7;
end if;
	
/* QED weighted numerator */	
#sum_weighted := @Weight_MW     * log(#QED_MW)    +
                 @Weight_AlogP  * log(#QED_ALOGP) +
                 @Weight_HBA    * log(#QED_HBA)   + 
                 @Weight_HBD    * log(#QED_HBD)   +
                 @Weight_PSA    * log(#QED_PSA)   +
                 @Weight_ROTB   * log(#QED_ROTB)  +
                 @Weight_AROM   * log(#QED_AROM);
if #alerts then
	#sum_weighted += @Weight_ALERTS * log(#QED_ALERTS);
end if;
				 
/* QED weighted denominator */	
#sum_weights_weighted := @Weight_MW + @Weight_AlogP + @Weight_HBA + @Weight_HBD +
                         @Weight_PSA + @Weight_ROTB + @Weight_AROM;
if #alerts then
	#sum_weights_weighted += @Weight_ALERTS;
end if;

/* QED */
#QED_UNWEIGHTED := exp(#sum_unweighted/#sum_weights_unweighted);
#QED_WEIGHTED   := exp(#sum_weighted/#sum_weights_weighted);

/* Format to 5 digits and output */
if contains(@Output, &quot;QED&quot;) then
	QED := floor(#QED_WEIGHTED*100000)/100000;
end if;
if contains(@Output, &quot;QED_Unweighted&quot;) then
	QED_Unweighted := floor(#QED_UNWEIGHTED*100000)/100000;
end if;
if contains(@Output, &quot;QED_MW&quot;) then
	QED_MW := floor(#QED_MW*100000)/100000;
end if;
if contains(@Output, &quot;QED_ALOGP&quot;) then
	QED_ALOGP := floor(#QED_ALOGP*100000)/100000;
end if;
if contains(@Output, &quot;QED_HBA&quot;) then
	QED_HBA := floor(#QED_HBA*100000)/100000;
end if;
if contains(@Output, &quot;QED_HBD&quot;) then
	QED_HBD := floor(#QED_HBD*100000)/100000;
end if;
if contains(@Output, &quot;QED_PSA&quot;) then
	QED_PSA := floor(#QED_PSA*100000)/100000;
end if;
if contains(@Output, &quot;QED_ROTB&quot;) then
	QED_ROTB := floor(#QED_ROTB*100000)/100000;
end if;
if contains(@Output, &quot;QED_AROM&quot;) then
	QED_AROM := floor(#QED_AROM*100000)/100000;
end if;
if #alerts and contains(@Output, &quot;QED_ALERTS&quot;) then
	QED_ALERTS := floor(#QED_ALERTS*100000)/100000;
end if;


</sci:value>
							</sci:arg>
							<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
								<sci:value>/* Set QED2018 ADS parameters */

#a_MW := 1.60093594827943;
#b_MW := 12811.3163082367;
#c_MW := 118.232175850919;
#d_MW := -343.303547098514;
#e_MW := 41.0557005210106;
#f_MW := 104.84631536977;
#dx_max_MW := 242.225754121319;

#a_AlogP := 0.122480960013894;
#b_AlogP := 373.102641914415;
#c_AlogP := 2.98971269223116;
#d_AlogP := 3.11057636571726;
#e_AlogP := 1.66275690137876;
#f_AlogP := 0.887929828481777;
#dx_max_AlogP := 228.459980638713;

#a_HBD := 0.186293059561229;
#b_HBD := 24259.4471448021;
#c_HBD := -2.43782050502796;
#d_HBD := -6.03828318273093;
#e_HBD := 0.473265729987659;
#f_HBD := 1.71126663211866;
#dx_max_HBD := 386.321847613543;

#a_HBA := 2.01406516913422;
#b_HBA := 266.188513889774;
#c_HBA := 3.66546401532066;
#d_HBA := 4.44225031354557;
#e_HBA := 0.383765491772952;
#f_HBA := 1.99122070171951;
#dx_max_HBA := 215.452692052893;

#a_PSA := 5.16224700043052;
#b_PSA := 259.9709128461;
#c_PSA := 60.7362863167486;
#d_PSA := 92.2245162427808;
#e_PSA := 7.83675021861385;
#f_PSA := 23.7290502748926;
#dx_max_PSA := 242.374147923449;

#a_ROTB := 0;
#b_ROTB := 1486.81204272481;
#c_ROTB := 1.4559300038902;
#d_ROTB := -3.79755614467955;
#e_ROTB := 1.37941048216201;
#f_ROTB := 2.99220503649569;
#dx_max_ROTB := 168.879583283655;

#a_AROM := 2.87892751752464;
#b_AROM := 288596.094374802;
#c_AROM := 5.46435723316547;
#d_AROM := -7.03559021344908;
#e_AROM := 1.22660536950333;
#f_AROM := 0.425093285445452;
#dx_max_AROM := 490.278124447105;

#a_ALERTS := 0;
#b_ALERTS := 1430.93616714399;
#c_ALERTS := 0.114150428363377;
#d_ALERTS := 0.589063140821196;
#e_ALERTS := 0.319014816388083;
#f_ALERTS := 0.824237331643833;
#dx_max_ALERTS := 624.120091342726;</sci:value>
							</sci:arg>
							<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Version of expression parser to use.</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>QED Calculation</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Custom Manipulator (PilotScript)</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Applies a PilotScript expression to each data record
</sci:value>
								<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>7.0.0.35</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>9</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Custom Manipulator (PilotScript)</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.EvaluateExpression.1">
						<sci:component name="Custom Filter (PilotScript)" version="2">
							<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>The PilotScript expression used to filter the data.</sci:help>
								<sci:member>Initial Expression</sci:member>
								<sci:member>Final Expression</sci:member>
								<sci:member>Keep Calculated Properties</sci:member>
								<sci:value>@&apos;Include ALERTS score&apos;</sci:value>
							</sci:arg>
							<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>&lt;p&gt;
An expression evaluated only when the component
is first initialized (when the first data record enters).
&lt;p/&gt;
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>&lt;p&gt;
An expression evaluated only when the
component is finalized (once the last data
record has passed).
&lt;p/&gt;
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:value>ComponentReturnsPass</sci:value>
								<sci:value>ComponentReturnsFail</sci:value>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval>ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
								<sci:help>Version of expression parser to use.</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Jan 21 09:57:16 2008</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>include ALERTS?</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>FILTERNODE</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Custom Filter (PilotScript)</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{DD58ECD1-516F-48FE-A5DB-8328AED680F2}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -395</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Passes data records for which a PilotScript expression evaluates to True

</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated. If the last statement in the expression evaluates to True or non-zero, the record is sent out the Pass port. Otherwise it is sent out the Fail port.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records for which the final expression in the PilotScript evaluates to True or non-zero</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records for which the final expression in the PilotScript evaluates to False or zero</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>23</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Filters\Custom Filter (PilotScript)</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">7.0.0.35</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:connectid from="21" to="24" type="true"/>
					<sci:connectid from="24" to="16" type="true"/>
					<sci:connectid from="16" to="13" type="true"/>
					<sci:connectid from="13" to="11" type="true"/>
					<sci:connectid from="11" to="9" type="true"/>
					<sci:connectid from="23" to="11" type="true"/>
					<sci:connectid from="23" to="9" type="false"/>
					<sci:version iVal="1"/>
				</sci:protocol>
			</sci:data>
			<sci:version iVal="1"/>
		</sci:protocol>
	</sci:dbitem>
<!-- Exported protocol -->
<sci:component name="8.0 Protocol Warning" version="2">
<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
<sci:help>Component Icon</sci:help>
<sci:value>PROTOCOLNODE</sci:value>
</sci:arg>
<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
<sci:help>Protocol Sticky Notes</sci:help>
<sci:value>%VERSION 3%</sci:value>
<sci:value>400 -219 1222 221</sci:value>
<sci:value>250 120 20</sci:value>
<sci:value>WARNING! This is a Pipeline Pilot protocol written in version 8.0 or later. It contains features that are not supported in earlier versions of Pipeline Pilot.</sci:value>
</sci:arg>
</sci:component>
</sci:data>
